 数组实际上是内存里一块连续的存储区域，如代码： new int[3],其作用上是内存里面分配总共12字节的存储空间。
像 new int[3]这样语句创建的数组称为“静态数组”，静态的意思是说这个数组一旦在内存中被构造出来，这个数组的大小和容量就固定了，你无法再调整它的大小（既不能扩大，也不能缩小）。数组的这个特点经常会给我们编程带来些麻烦，看下面的程序（例1-1-1），因为我们不知道读取的文件有多大，导致我们构造出来的数组有可能因为过大浪费了很多存储空间，也可能因为过小使得程序出错。
与静态数组相反的概念是“动态数组”，使用动态数组的时候可以先随意创建一个任意大小的数组，程序员可以在程序的任意位置随需要增减它的大小。使用动态数组的程序的伪代码如1-1-2所示。
遗憾的是，目前尚无任何一种程序设计语言能够提供真正意义上的“动态数组”，这也是1-1-2只能使用伪代码的原因。为什么？需要读者自己先想想。
如果程序设计语言不提供动态数组，我们如何确保例1-1-1程序不会出错呢？一种编程方法如下所示（例1-1-3）。这种方法实际上是当发现数组大小不够的时候，创建一个全新的且足够大的数组，然后将原数组的内容拷贝到新数组，原数组就丢弃不用了。容易看出，这实现了动态数组想要的功能，但不是真正意义上的动态数组。
我们可以将刚才程序进一步完善，充分利用面向对象语言的封装性，将例1-1-3封装在一个类中，改写后的例程如1-1-4所示，读取文件的程序直接使用这个类（DynamicIntArray）的对象来读取文件，如果不看这个类内部代码，单从使用角度（main函数）看它确实很像一个“动态数组”。不难想象，这个“动态数组“类DynamicIntArray可以在很多编程场景用到它。
无论是静态数组还是动态数组，其本质都是一种存储数据的集合，我们在程序中使用下标或者特定的函数来读取或者修改这个集合中的元素。面向对象语言中习惯使用Collection来表达集合概念（注意不是Set）。不仅如此，数组也只是集合的一种，如图1-1-1所示，可以看出其中的主要区别在于集合中元素之间的关系不同。
如果集合中的元素存在一种线序关系，我们就可以为集合中的每个元素设定一个编号，通过这个编号存储集合中的元素，就像数组以及例1-1-4那样。但是如何数组中不存在线序关系（将图1-1-1F），如何访问集合中的元素呢？这引出一个新的概念——迭代器。迭代器也是一个类，它提供一系列方法来逐个遍历集合的元素。使用迭代器的伪代码1-1-5所示。
可以看出，迭代器和集合这两个概念都非常抽象，不像数组那么简单明了。不过它已经成为现代面向对象语言的重要概念了，本章下面的内容重点讲解迭代器和集合的相关概念和实际编程实例。